public class leetcode124maxPathSum {
    public static void main(String[] args) {
        TreeNode node0 = new TreeNode(-10);
        TreeNode node1 = new TreeNode(9);
        TreeNode node2 = new TreeNode(20);
        TreeNode node3 = new TreeNode(15);
        TreeNode node4 = new TreeNode(7);
//        TreeNode node5 = new TreeNode(-5);
//        TreeNode node6 = new TreeNode(6);

        node0.setLeft(node1);
        node0.setRight(node2);
        node2.setRight(node4);
        node2.setLeft(node3);
//        node4.setRight(node5);
//        node5.setLeft(node6);

        int res = maxPathSum(node0);
        System.out.print(res);

    }
    static int max = Integer.MIN_VALUE;
    private static int maxPathSum(TreeNode root){
        if(root == null){
            return 0;
        }
        dfs(root);
        return max;
    }
    public static int dfs(TreeNode root){
        if(root == null){
            return 0;
        }
        int left = dfs(root.left);
        int right = dfs(root.right);

        int temp = Math.max(left,right);//左右子树的最大延伸路径

        if(temp > 0){
            temp += root.val;//最大延伸大于0时，加上根结点的值就是当前最大值
        }
        else{
            temp = root.val;//最大延伸大于0时，说明左右的最大延伸值都小于0，都舍弃，只要根节点
        }

        int val = root.val;
        if(left >= 0){
            val += left;
        }

        if(right >= 0){
            val += right;
        }

        max = Math.max(val,max);

        return temp;//temp是当前节点的最大延展长度

    }
}

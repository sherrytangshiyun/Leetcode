public class leetcode687longestUnivaluePath {

        public static void main(String[] args) {
            TreeNode node0 = new TreeNode(15);
            TreeNode node1 = new TreeNode(9);
            TreeNode node2 = new TreeNode(15);
            TreeNode node3 = new TreeNode(15);
            TreeNode node4 = new TreeNode(7);


            node0.setLeft(node1);
            node0.setRight(node2);
            node2.setRight(node4);
            node2.setLeft(node3);


            int res = longestUnivaluePath(node0);
            System.out.print(res);

        }

    static int maxLen = 0;
    private static int longestUnivaluePath(TreeNode root){
        if(root == null){
            return 0;
        }
        help(root);
        return maxLen;

    }

    private static int help(TreeNode root){

        if(root == null){
            return 0;
        }
        int temp = 0;

        int left = help(root.left);
        int right = help(root.right);

        //如果左节点和右节点都和当前根节点的值相同，则当前最大长度为2
        if(root.left != null && root.left.val == root.val && root.right!=null && root.right.val == root.val){
            maxLen = Math.max(maxLen,left + right + 2);
        }

        if(root.right != null && root.right.val == root.val){
            temp = right+1;
        }

        if(root.left != null && root.left.val == root.val){
            temp = Math.max(temp,left + 1);
        }

        maxLen = Math.max(maxLen,temp); //更新全局最大值

        return temp;

    }

}
